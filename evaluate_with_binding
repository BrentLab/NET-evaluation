#!/bin/bash
# ======================================================== #
# |                    *** Usage ***                     | #
# ======================================================== #
usage(){
cat << EOF
    evaluate-network v1.0
    
    binding command for evaluating network with binding data
    binding [options]
    
    GENERAL arguments
    --p_net                   : path of file for input network, couple of input formats are allowed: (1) three-columns tab separated file |REGULATOR|TARGET|VALUE, (2) a matrix tab separated file rows are regulators, columns are target genes (mandatory).
    --p_src_code              : path of directory for code, (mandatory, only if flag_singularity OFF)
    --nbr_edges_per_reg       : number of edges per regulators (optional, default 100)
    --nbr_bins                : number of bins (optional, default 20)
    --fname_net               : name of data or network (optional)
    --p_eval                  : path file of output evaluation (mandatory)
    --flag_debug_B            : ON or OFF, if ON the bash command is printed
    --flag_debug_PY            : ON or OFF, if ON the python command is printed

    SINGULARITY arguments
    --flag_singularity        : ON or OFF, for singularity run (optional, default ON)
    --p_singularity_bindpath  : path of mounted directory to singularity container (optional)
    --p_singularity_img       : path of directory for singularity containerr image provided in github page (mandatory, if flag_singularity is ON)  
   
    SLURM arguments
    --flag_slurm              : ON or OFF, for SLURM run (optional, default OFF)
    --p_dir_logs              : path of directory for SLURM log files (mandatory, only if flag_slurm is ON)
    
EOF
}

# ======================================================== #
# |         *** Define Default Arguments ***             | #
# ======================================================== #
nbr_bins=20
nbr_edges_per_reg=100
flag_singularity=ON
p_singularity_bindpath=/home/
flag_slurm=OFF
p_src_code=NONE
fname_net=network
conda_env=np3
p_binding_event=NONE
flag_debug_B=OFF
flag_debug_PY=OFF

# ======================================================== #
# |               *** Parse Arguments ***                | #
# ======================================================== #
while getopts ":h-:" OPTION
do
    case "${OPTION}" in
        h)
            usage
            exit 2
            ;;
        -)
            case "${OPTARG}" in
                 # GENERAL arguments
                 p_net)
                     p_net="${!OPTIND}"; OPTIND=$(( ${OPTIND} + 1 ))
                     ;;
                 p_eval)
                     p_eval="${!OPTIND}"; OPTIND=$(( ${OPTIND} + 1 ))
                     ;;
                 nbr_edges_per_reg)
                     nbr_edges_per_reg="${!OPTIND}"; OPTIND=$(( ${OPTIND} + 1 ))
                     ;;
                 p_src_code)
                     p_src_code="${!OPTIND}"; OPTIND=$(( ${OPTIND} + 1 ))
                     ;;
                 conda_env)
                     conda_env="${!OPTIND}"; OPTIND=$(( ${OPTIND} + 1 ))
                     ;;
                 fname_net)
                     fname_net="${!OPTIND}"; OPTIND=$(( ${OPTIND} + 1 ))
                     ;;
                 p_binding_event)
                     p_binding_event="${!OPTIND}"; OPTIND=$(( ${OPTIND} + 1 ))
                     ;;
                 flag_debug_B)
                     flag_debug_B="${!OPTIND}"; OPTIND=$(( ${OPTIND} + 1 ))
                     ;;
                 flag_debug_PY)
                     flag_debug_PY="${!OPTIND}"; OPTIND=$(( ${OPTIND} + 1 ))
                     ;;
                     
                 # SLURM arguments
                 flag_slurm)
                     flag_slurm="${!OPTIND}"; OPTIND=$(( ${OPTIND} + 1 ))
                     ;;
                 p_out_logs)
                     p_out_logs="${!OPTIND}"; OPTIND=$(( ${OPTIND} + 1 ))
                     ;;
                 
                 # SINGULARITY arguments
                 flag_singularity)
                     flag_singularity="${!OPTIND}"; OPTIND=$(( ${OPTIND} + 1 ))
                     ;;
                 p_singularity_bindpath)
                     p_singularity_bindpath="${!OPTIND}"; OPTIND=$(( ${OPTIND} + 1 ))
                     ;;
                 p_singularity_img)
                     p_singularity_img="${!OPTIND}"; OPTIND=$(( ${OPTIND} + 1 ))
                     ;;
            esac;;
    esac
done

# ======================================================== #
# |              *** Define Command ***                  | #
# ======================================================== #

command=""

if [ ${flag_slurm} == "ON" ]
then
    mkdir -p ${p_out_logs}
    command+="sbatch 
            -o ${p_out_logs}eval_go_%J.out \
            -e ${p_out_logs}eval_go_%J.err \
            -J eval_with_binding "
fi

if [ ${flag_singularity} == "ON" ]
then
    p_src_code=${p_singularity_img}/home/NET-evaluation/
fi

if [ ${p_binding_event} == "NONE" ]
then
    p_binding_event=${p_src_code}/metadata/reg_target_cc_exo_chip_exclusive.txt
fi

command+="${p_src_code}wrapper/evaluate_with_binding.sh \
            --p_net ${p_net} \
            --p_eval ${p_eval} \
            --fname_net ${fname_net} \
            --nbr_bins ${nbr_bins} \
            --nbr_edges_per_reg ${nbr_edges_per_reg} \
            --p_src_code ${p_src_code} \
            --flag_slurm ${flag_slurm} \
            --conda_env ${conda_env} \
            --p_binding_event ${p_binding_event} \
            --flag_singularity ${flag_singularity} \
            --p_singularity_bindpath ${p_singularity_bindpath} \
            --p_singularity_img ${p_singularity_img} \
            --flag_debug_PY ${flag_debug_PY}"

# ======================================================== #
# |                *** Run Command ***                   | #
# ======================================================== #
if [ ${flag_debug_B} == "ON" ]
then
    echo "${command}"
fi
eval ${command}
